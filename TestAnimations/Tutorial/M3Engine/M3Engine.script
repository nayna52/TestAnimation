------------------------------------------------------------------------
-- LOCAL VARIABLES
------------------------------------------------------------------------
go.property("timer", 0)      -- Use to time events
local blocksize = 70         -- Distance between block centers
local edge = 340              -- Left and right edge.
local bottom_edge = 10       -- Bottom edge.
local boardwidth = 13        -- Number of columns
local boardheight = 10       -- Number of rows
local types = { hash("BlueTile"), hash("GreenTile"), hash("YellowTile"), hash("WhiteTile"), hash("PinkTile"), hash("RedTile") }

------------------------------------------------------------------------
-- LOCAL FUNCTIONS
------------------------------------------------------------------------
--
-- Function to build the board with random elements
--
local function build_board(self)
	math.randomseed(os.time())
	local pos = vmath.vector3()
	local t
	local x = 0
	local y = 0
	for x = 0, boardwidth - 1 do
		pos.x = edge + blocksize / 2 + blocksize * x
		self.board[x] = {}
		for y = 0,boardheight-1 do
			pos.y = bottom_edge + blocksize / 2 + blocksize * y
			-- Calc z
			pos.z = 0 -- <1>
			t = types[math.random(#types)]    -- Pick a random tile type
			local id = factory.create("#tilefactory", pos, null, { type = t })
			self.board[x][y] = { id = id, type = t,  x = x, y = y }
		end
	end
end

--
-- Callback for the function that animated the deletion of tile
--
local function remove_ended(self, slide)
	if slide then
		msg.post("#", "slide")
	end
end

local function nothing(self)
end

--
-- Trigger the remove animation
--
local function remove_animation(self)
	-- Delete all chained blocks
	for i, c in ipairs(self.chain) do
		msg.post(c.id, "explode")
	end
	msg.post("#", "remove")
end

--
-- Set removed blocks to nil
--
local function nilremoved(self)
	for y = 0,boardheight - 1 do
		for x = 0,boardwidth - 1 do
			if self.board[x][y] == hash("removing") then
				self.board[x][y] = nil
			end
		end
	end
end

--
-- Remove the currently selected block-chain
--
local function remove_chain(self)
	-- Delete all chained blocks
	for i, c in ipairs(self.chain) do
		if i == #self.chain then
			remove_ended(self, true)
		end
		self.board[c.x][c.y] = hash("removing")
		if c.id ~= nil then
			go.delete(c.id)
		end
	end
	self.chain = {}
	nilremoved(self)
end

--
-- Find spots for a drop.
--
local function dropspots(self)
	local spots = {}
	for x = 0, boardwidth - 1 do
		for y = 0, boardheight - 1 do
			if self.board[x][y] == nil then
				table.insert(spots, { x = x, y = y })
				break
			end
		end
	end
	return spots
end

--
-- Find out if the tiles are neighbours and the direction
--
local function is_tile_neighbour(self, curr_position_selected, position)
	is = nil
	-- neighbor on x axis, but not diagonal (y condition)
	if (position.x + 1 == curr_position_selected.x or position.x - 1 == curr_position_selected.x) and position.y == curr_position_selected.y then
		is = "x"
	-- neighbor on y axis, but not diagonal (x condition)
	else
		if (position.y + 1 == curr_position_selected.y or position.y - 1 == curr_position_selected.y) and position.x == curr_position_selected.x then
		is = "y"
		end
	end
	return is
end

--
-- Detect X match (Horizontal)
--
local function detect_x_match(self)
	for y = 0, boardheight do
		x = 0
		while x < boardwidth - 2 do
			if self.board[x][y] ~= nil then
				type = self.board[x][y].type
				if hash(self.board[x + 1][y].type) == hash(type) and hash(self.board[x + 2][y].type) == hash(type) then
					repeat
						table.insert(self.chain, self.board[x][y])
						x = x + 1
						if x == boardwidth then
							break
						end
					until hash(self.board[x][y].type) ~= hash(type)
				end
			end
			x = x + 1
		end
	end
end

--
-- Detect Y match (Horizontal)
--
local function detect_y_match(self)
	for x = 0, boardwidth - 1 do
		y = 0
		while y < boardheight - 2 do
			if self.board[x][y] ~= nil then
				type = self.board[x][y].type
				if hash(self.board[x][y + 1].type) == hash(type) and hash(self.board[x][y + 2].type) == hash(type) then
					repeat
						table.insert(self.chain, self.board[x][y])
						y = y + 1
						if y == boardheight then
							break
						end
					until hash(self.board[x][y].type) ~= hash(type)
				end
			end
			y = y + 1
		end
	end
end

--
-- Is table empty
--
function is_table_empty(t)
	for _,_ in pairs(t) do
		return false
	end
	return true
end

--
-- Is match made
--
local function is_match_made(self)
	detect_x_match(self)
	detect_y_match(self)
	if is_table_empty(self.chain) then
		return false
	else
		return true
	end
end

--
-- Callback for swap animation. 
-- This function is called when the animation for the swap has ended.
-- Trigger the rest of the match 3 logic.
--
local function swap_ended(self, first, position)
	if first == true then
		if is_match_made(self) then
			-- Perform match actions
			msg.post("#", "match_found")
		else
			msg.post("#", "swap", {curr = curr_position_selected, new = position, dir = direction, delay = 0.3, first = false, position = position})
			msg.post(self.board[position.x][position.y].id, "deglow")
		end
		curr_position_selected = nil
	end
end

--
-- Swap the neighbour tiles
--
local function swap(self, tile1, tile2, direction, delay, first, position)
	-- Perform the swap ids
	tile = self.board[tile1.x][tile1.y]
	self.board[tile1.x][tile1.y] = self.board[tile2.x][tile2.y]
	self.board[tile2.x][tile2.y] = tile
	-- Swap position on board
	self.board[tile1.x][tile1.y].x = tile1.x
	self.board[tile1.x][tile1.y].y = tile1.y
	self.board[tile2.x][tile2.y].x = tile2.x
	self.board[tile2.x][tile2.y].y = tile2.y

	-- Swap Animation
	if direction == "x" then
		go.animate(self.board[tile1.x][tile1.y].id, "position.x", go.PLAYBACK_ONCE_FORWARD, edge + blocksize / 2 + blocksize * tile1.x, go.EASING_OUTBOUNCE, 0.3, delay)
		go.animate(self.board[tile2.x][tile2.y].id, "position.x", go.PLAYBACK_ONCE_FORWARD, edge + blocksize / 2 + blocksize * tile2.x, go.EASING_OUTBOUNCE, 0.3, delay, swap_ended(self, first, position))
	else
		go.animate(self.board[tile1.x][tile1.y].id, "position.y", go.PLAYBACK_ONCE_FORWARD, bottom_edge + blocksize / 2 + blocksize * tile1.y, go.EASING_OUTBOUNCE, 0.3, delay)
		go.animate(self.board[tile2.x][tile2.y].id, "position.y", go.PLAYBACK_ONCE_FORWARD, bottom_edge + blocksize / 2 + blocksize * tile2.y, go.EASING_OUTBOUNCE, 0.3, delay, swap_ended(self, first, position))
	end
end


--
-- Callback from the slide animation.
--
local function drop_ended(self, handle, time_elapsed)
	if is_match_made(self) then
		-- Perform match actions
		msg.post("#", "match_found")
	end
end


--
-- Perform the drop
--
local function drop(self, spots)
	for i, s in pairs(spots) do
		local pos = vmath.vector3()
		pos.x = edge + blocksize / 2 + blocksize * s.x
		pos.y = 1000
		pos.z = 0
		t = types[math.random(#types)]    -- Pick a random type
		local id = factory.create("#tilefactory", pos, null, { type = t })
		self.board[s.x][s.y] = { id = id, type = t,  x = s.x, y = s.y }
		go.animate(id, "position.y", go.PLAYBACK_ONCE_FORWARD, bottom_edge + blocksize / 2 + blocksize * s.y, go.EASING_LINEAR, 0.3, 0.1)
	end
	msg.post("#", "drop_ended")
end

--
-- Function to generate new tiles when others are deleted
--
local function generate_tiles(self)
	s = dropspots(self)
	while #s > 0 do
		drop(self, s)
		s = dropspots(self)
	end
end

--
-- Apply shift-down logic to all blocks.
--
local function slide_board(self)
	-- Slide all remaining blocks down into blank spots.
	-- Going column by column makes this easy.
	local dy = 0

	for x = 0, boardwidth - 1 do
		dy = 0
		for y = 0, boardheight - 1 do
			if self.board[x][y] ~= nil then
				if dy > 0 then
					-- Move down dy steps
					self.board[x][y - dy] = self.board[x][y]
					self.board[x][y] = nil
					-- Calc new position
					self.board[x][y - dy].y = self.board[x][y - dy].y - dy
					go.animate(self.board[x][y-dy].id, "position.y", go.PLAYBACK_ONCE_FORWARD, bottom_edge + blocksize / 2 + blocksize * (y - dy), go.EASING_LINEAR, 0.3, 0.1)
				end
			else
				dy = dy + 1
			end
		end
	end
	-- reload
	generate_tiles(self)
end

------------------------------------------------------------------------
-- DEFOLD FUNCTIONS
------------------------------------------------------------------------

function init(self)
	-- Add initialization code here
	-- Remove this function if not needed
	self.board = {}                       -- Contains the board structure
	self.chain = {}                       -- Current selection chain
	self.curr_position_selected = nil     -- Position of the current selected tile
	msg.post(".", "acquire_input_focus")
	msg.post("#", "start_level")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
	if message_id == hash("start_level") then
		build_board(self)
	end
	if message_id == hash("swap") then
		swap(self, message.curr, message.new , message.dir, message.delay, message.first, message.position)
	end
	if message_id ==hash("match_found") then
		remove_animation(self)
	end
	if message_id ==hash("remove") then
		timer.delay(0.2, false, remove_chain)
	end
	if message_id == hash("slide") then
		slide_board(self)
	end
	if message_id == hash("drop_ended") then
		timer.delay(0.5, false, drop_ended)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed

	if action_id == hash("click") and action.pressed then
		-- What block was touched?
		-- Get location of the click/touch
		local curr_x = math.floor((action.x - edge) / blocksize)
		local curr_y = math.floor((action.y - bottom_edge) / blocksize)

		if (curr_x < 0 or curr_x >= boardwidth) or (curr_y < 0 or curr_y >= boardheight) or (self.board[curr_x][curr_y] == nil) then
			-- outside board.
			return
		end

		-- Check to see if a tile is selected already
		if curr_position_selected == nil then
			-- No tile selected, select a tile to swap
			curr_position_selected = vmath.vector3(curr_x, curr_y, 0)
			msg.post(self.board[curr_x][curr_y].id, "glow")
		else
			-- A tile is already selected
			position = vmath.vector3(curr_x, curr_y, 0)
			direction = is_tile_neighbour(self, curr_position_selected, position)
			if direction ~= nil then
				--print(#)
				msg.post("#", "swap", {curr = curr_position_selected, new = position, dir = direction, delay = 0, first = true, position = position})
			else
				msg.post(self.board[curr_position_selected.x][curr_position_selected.y].id, "deglow")
				curr_position_selected = nil
			end
		end
	end
end

